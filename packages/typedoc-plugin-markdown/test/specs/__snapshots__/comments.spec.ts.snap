// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comments should compile comments for module: (Output File Strategy "members") (Option Group "1") 1`] = `
"# typedoc-stubs

Comments form module comments

> links

Links using \`{@link}\` inline tags.

- [CommentInterface](interfaces/CommentInterface.md) - Links to CommentInterface
- [Links to CommentInterface.prop](interfaces/CommentInterface.md#prop)
- [Links to CommentInterface.propb](interfaces/CommentInterface.md#propb)
- [CommentEnum.MemberB](enumerations/CommentEnum.md)
- [SameName:var](variables/SameName.md)
- [SameName:interface](interfaces/SameName.md)
- [SameName.prop](interfaces/SameName.md#prop)
- [prop:var](variables/prop.md)
- [_prop_with_underscore:var](variables/prop_with_underscore.md)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

## See

 - Comments for a tag
 - Comments for tag written on same line

## Html And Jsx

A <tag></tag> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

<div style={{backgroundColor: "#fff", padding: 16}}>
 <img style={{display: "block"}} height="48" width="48"/>
</div>

Some random {{braces}}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

> media

You can include media in doc comments:

![alt SomeAlt](media://logo.png)

And include other files:

> codeBlocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Documents

- [example](documents/example.md)

## Enumerations

- [CommentEnum](enumerations/CommentEnum.md)
- [EnumMembersTable](enumerations/EnumMembersTable.md)

## Classes

- [BaseClassProperties](classes/BaseClassProperties.md)
- [ClassPropertiesTable](classes/ClassPropertiesTable.md)

## Interfaces

- [BaseInterfaceProperties](interfaces/BaseInterfaceProperties.md)
- [CommentInterface](interfaces/CommentInterface.md)
- [CommentInterfaceExtended](interfaces/CommentInterfaceExtended.md)
- [InterfacePropertiesTable](interfaces/InterfacePropertiesTable.md)
- [SameName](interfaces/SameName.md)

## Type Aliases

- [TypeDeclarationTable](type-aliases/TypeDeclarationTable.md)

## Variables

- [SameName](variables/SameName.md)
- [TypeDeclarationTable](variables/TypeDeclarationTable.md)
- [\\_prop\\_with\\_underscore](variables/prop_with_underscore.md)
- [prop](variables/prop.md)
- [propb](variables/propb.md)

## Functions

- [multipleExampleTags](functions/multipleExampleTags.md)
- [parametersTable](functions/parametersTable.md)
- [singleExampleTag](functions/singleExampleTag.md)
"
`;

exports[`Comments should get tables for emum: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Enumeration: EnumMembersTable

## Enumeration Members

| Enumeration Member | Value | Description | Source |
| ------ | ------ | ------ | ------ |
| \`member1\` | \`"member1"\` | The subroutine recursively parsed the hexadecimal data. | [index.ts:1](http://source-url) |
"
`;

exports[`Comments should get tables for emum: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Enumeration: EnumMembersTable

## Enumeration Members

<table>
<tr>
<th align="left">Enumeration Member</th>
<th align="left">Value</th>
<th align="left">Description</th>
</tr>
<tr>
<td>

<a id="member1" name="member1"></a> \`member1\`

</td>
<td>

\`"member1"\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.

</td>
</tr>
</table>
"
`;

exports[`Comments should get tables for parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: parametersTable()

> **parametersTable**\\<\`T\`\\>(\`param1\`, \`param2\`, \`param3\`): \`number\`

Adds two numbers together.

## Type Parameters

| Type Parameter | Default type | Description |
| ------ | ------ | ------ |
| \`T\` | \`string\` | The type of the numbers to be added. |

## Parameters

| Parameter | Type | Default value | Description |
| ------ | ------ | ------ | ------ |
| \`param1\` | \`number\` | \`undefined\` | The first param to be added. |
| \`param2\` | \`number\` | \`undefined\` | The second param to be added. Some additional text for num2. |
| \`param3\` | \`number\` | \`4\` | The third param to be added. |

## Returns

\`number\`

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should get tables for properties: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassPropertiesTable

## Extends

- [\`BaseClassProperties\`](BaseClassProperties.md)

## Constructors

### new ClassPropertiesTable()

> **new ClassPropertiesTable**(): [\`ClassPropertiesTable\`](ClassPropertiesTable.md)

#### Returns

[\`ClassPropertiesTable\`](ClassPropertiesTable.md)

#### Inherited from

[\`BaseClassProperties\`](BaseClassProperties.md).[\`constructor\`](BaseClassProperties.md#constructors)

## Properties

### prop1

> \`private\` **prop1**: \`boolean\`

The subroutine recursively parsed the hexadecimal data.
to generate the binary output for input validation.

#### Source

[index.ts:1](http://source-url)

***

### prop2

> \`readonly\` **prop2**: \`RegExp\`

Below is a breakdown of the notable performances:

- The CPU executed the instruction set in parallel with the GPU computations.
- The RAM efficiently cached the frequently accessed data for faster retrieval.
- The SSD accessed the stored files with lightning speed due to its high read/write capabilities.

#### Source

[index.ts:1](http://source-url)

***

### prop3?

> \`optional\` **prop3**: \`string\`

> Example of Triple Code Block

\`\`\`ts
def greet(name):
print("Hello, " + name + "!")
\`\`\`

#### Source

[index.ts:1](http://source-url)

***

### ~~propA~~

> **propA**: \`string\` = \`'propAValue'\`

#### Deprecated

#### Overrides

[\`BaseClassProperties\`](BaseClassProperties.md).[\`propA\`](BaseClassProperties.md#propa)

#### Source

[index.ts:1](http://source-url)

***

### propB

> **propB**: \`string\`

#### Inherited from

[\`BaseClassProperties\`](BaseClassProperties.md).[\`propB\`](BaseClassProperties.md#propb)

#### Source

[index.ts:1](http://source-url)

***

### propWithFlag

\`Experimental\`

> **propWithFlag**: \`string\`

#### Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should get tables for properties: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassPropertiesTable

## Extends

- [\`BaseClassProperties\`](http:/example.com/Class.BaseClassProperties.md)

## Constructors

<a id="Constructors" name="Constructors"></a>

### new ClassPropertiesTable()

> **new ClassPropertiesTable**(): [\`ClassPropertiesTable\`](http:/example.com/Class.ClassPropertiesTable.md)

#### Returns

[\`ClassPropertiesTable\`](http:/example.com/Class.ClassPropertiesTable.md)

#### Inherited from

[\`BaseClassProperties\`](http:/example.com/Class.BaseClassProperties.md).[\`constructor\`](http:/example.com/Class.BaseClassProperties.md#Constructors)

## Properties

<table>
<tr>
<th align="left">Property</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
<tr>
<td>

<a id="prop1" name="prop1"></a> \`prop1\`

</td>
<td>

\`boolean\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.
to generate the binary output for input validation.

</td>
</tr>
<tr>
<td>

<a id="prop2" name="prop2"></a> \`prop2\`

</td>
<td>

\`RegExp\`

</td>
<td>

Below is a breakdown of the notable performances:

- The CPU executed the instruction set in parallel with the GPU computations.
- The RAM efficiently cached the frequently accessed data for faster retrieval.
- The SSD accessed the stored files with lightning speed due to its high read/write capabilities.

</td>
</tr>
<tr>
<td>

<a id="prop3" name="prop3"></a> \`prop3?\`

</td>
<td>

\`string\`

</td>
<td>

> Example of Triple Code Block

\`\`\`ts
def greet(name):
print("Hello, " + name + "!")
\`\`\`

</td>
</tr>
<tr>
<td>

<a id="propA" name="propA"></a> ~~\`propA\`~~

</td>
<td>

\`string\`

</td>
<td>

**Deprecated**

</td>
</tr>
<tr>
<td>

<a id="propB" name="propB"></a> \`propB\`

</td>
<td>

\`string\`

</td>
<td>

&hyphen;

</td>
</tr>
<tr>
<td>

<a id="propWithFlag" name="propWithFlag"></a> \`propWithFlag\` (*Experimental*)

</td>
<td>

\`string\`

</td>
<td>

&hyphen;

</td>
</tr>
</table>
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type Alias: TypeDeclarationTable

> **TypeDeclarationTable**: \`object\`

## Type declaration

| Name | Type | Description | Source |
| ------ | ------ | ------ | ------ |
| \`declaration1\` | \`boolean\` | The subroutine recursively parsed the hexadecimal data. to generate the binary output for input validation. | [index.ts:1](http://source-url) |
| \`declaration2\` | \`boolean\` | The subroutine recursively parsed the hexadecimal data. to generate the binary output for input validation. | [index.ts:1](http://source-url) |
| \`declaration4\` | \`100\` | - | [index.ts:1](http://source-url) |

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "1") 2`] = `
"# Variable: TypeDeclarationTable

> **TypeDeclarationTable**: \`object\`

## Type declaration

| Name | Type | Default value | Source |
| ------ | ------ | ------ | ------ |
| \`declaration1\` | \`string\` | 'declaration3' | [index.ts:1](http://source-url) |
| \`declaration2\` | \`number\` | 100 | [index.ts:1](http://source-url) |

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type Alias: TypeDeclarationTable

> **TypeDeclarationTable**: \\{\`declaration1\`: \`boolean\`;\`declaration2\`: \`boolean\`;\`declaration4\`: \`100\`; \\}

## Type declaration

<table>
<tr>
<th align="left">Name</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
<tr>
<td>

\`declaration1\`

</td>
<td>

\`boolean\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.
to generate the binary output for input validation.

</td>
</tr>
<tr>
<td>

\`declaration2\`

</td>
<td>

\`boolean\`

</td>
<td>

The subroutine recursively parsed the hexadecimal data.
to generate the binary output for input validation.

</td>
</tr>
<tr>
<td>

\`declaration4\`

</td>
<td>

\`100\`

</td>
<td>

&hyphen;

</td>
</tr>
</table>

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should get tables for type declarations: (Output File Strategy "members") (Option Group "2") 2`] = `
"# Variable: TypeDeclarationTable

> **TypeDeclarationTable**: \\{\`declaration1\`: \`'declaration3'\`;\`declaration2\`: \`100\`; \\}

## Type declaration

<table>
<tr>
<th align="left">Name</th>
<th align="left">Type</th>
<th align="left">Default value</th>
</tr>
<tr>
<td>

\`declaration1\`

</td>
<td>

\`string\`

</td>
<td>

'declaration3'

</td>
</tr>
<tr>
<td>

\`declaration2\`

</td>
<td>

\`number\`

</td>
<td>

100

</td>
</tr>
</table>

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should handle multiple example tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: multipleExampleTags()

> **multipleExampleTags**(): \`boolean\`

Function with multiple example tags

## Returns

\`boolean\`

## Examples

\`\`\`ts
// If there are no code blocks, TypeDoc assumes the whole tag
// should be a code block. This is not valid TSDoc, but is recognized
// by VSCode and enables better JSDoc support.

factorial(1)
\`\`\`

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`

## Source

[index.ts:1](http://source-url)
"
`;

exports[`Comments should handle single example tags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: multipleExampleTags()

> **multipleExampleTags**(): \`boolean\`

Function with multiple example tags

## Returns

\`boolean\`

## Examples

\`\`\`ts
// If there are no code blocks, TypeDoc assumes the whole tag
// should be a code block. This is not valid TSDoc, but is recognized
// by VSCode and enables better JSDoc support.

factorial(1)
\`\`\`

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`

## Source

[index.ts:1](http://source-url)
"
`;
