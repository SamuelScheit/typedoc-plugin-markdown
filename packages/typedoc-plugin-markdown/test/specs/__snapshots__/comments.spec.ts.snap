// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comments should compile comments for module: (Output File Strategy "members") (Option Group "1") 1`] = `
"# typedoc-stubs

Comments form module comments

## Links

Links using \`{@link}\` inline tags.

- [CommentInterface](interfaces/CommentInterface.md) - Links to CommentInterface
- [Links to CommentInterface.prop](interfaces/CommentInterface.md)
- [Links to CommentInterface.propb](interfaces/CommentInterface.md)
- [CommentEnum.MemberB](enumerations/CommentEnum.md)
- [SameName:var](variables/SameName.md)
- [SameName:interface](interfaces/SameName.md)
- [SameName.prop](interfaces/SameName.md)
- [prop:var](variables/prop.md)
- [_prop_with_underscore:var](variables/prop_with_underscore.md)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

## Tag A

Comments for a tag

## Tag B

Comments for tag written on same line

## Html And Jsx

A <tag></tag> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

<div style={{backgroundColor: "#fff", padding: 16}}>
 <img style={{display: "block"}} height="48" width="48"/>
</div>

Some random {{braces}}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

## Media

You can include media in doc comments:

![alt SomeAlt](media/logo.png)

And include other files:

This is a simple example on how to use include.

![My image alt text](media/logo.png)
 [[include:not-found.md]]

## Code Blocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Enumerations

- [CommentEnum](enumerations/CommentEnum.md)

## Interfaces

- [CommentInterface](interfaces/CommentInterface.md)
- [CommentInterfaceExtended](interfaces/CommentInterfaceExtended.md)
- [SameName](interfaces/SameName.md)

## Variables

- [SameName](variables/SameName.md)
- [\\_prop\\_with\\_underscore](variables/prop_with_underscore.md)
- [prop](variables/prop.md)
- [propb](variables/propb.md)

## Functions

- [multipleExampleTags](functions/multipleExampleTags.md)
- [singleExampleTag](functions/singleExampleTag.md)
"
`;

exports[`Comments should compile comments for module: (Output File Strategy "members") (Option Group "2") 1`] = `
"# typedoc-stubs

Comments form module comments

## Links

Links using \`{@link}\` inline tags.

- [CommentInterface](http:/example.com/Interface.CommentInterface.mdx) - Links to CommentInterface
- [Links to CommentInterface.prop](http:/example.com/Interface.CommentInterface.mdx#prop)
- [Links to CommentInterface.propb](http:/example.com/Interface.CommentInterface.mdx#propb)
- [CommentEnum.MemberB](http:/example.com/Enumeration.CommentEnum.mdx#MemberB)
- [SameName:var](http:/example.com/Variable.SameName.mdx)
- [SameName:interface](http:/example.com/Interface.SameName.mdx)
- [SameName.prop](http:/example.com/Interface.SameName.mdx#prop)
- [prop:var](http:/example.com/Variable.prop.mdx)
- [_prop_with_underscore:var](http:/example.com/Variable._prop_with_underscore.mdx)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

## Tag A

Comments for a tag

## Tag B

Comments for tag written on same line

## Html And Jsx

A \\<tag\\>\\</tag\\> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

\\<div style=\\{\\{backgroundColor: "#fff", padding: 16\\}\\}\\>
 \\<img style=\\{\\{display: "block"\\}\\} height="48" width="48"/\\>
\\</div\\>

Some random \\{\\{braces\\}\\}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

## Media

You can include media in doc comments:

![alt SomeAlt](media/logo.png)

And include other files:

This is a simple example on how to use include.

![My image alt text](media/logo.png)
 [[include:not-found.md]]

## Code Blocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Enumerations

- [CommentEnum](http:/example.com/Enumeration.CommentEnum.mdx)

## Interfaces

- [CommentInterface](http:/example.com/Interface.CommentInterface.mdx)
- [CommentInterfaceExtended](http:/example.com/Interface.CommentInterfaceExtended.mdx)
- [SameName](http:/example.com/Interface.SameName.mdx)

## Variables

- [SameName](http:/example.com/Variable.SameName.mdx)
- [\\_prop\\_with\\_underscore](http:/example.com/Variable._prop_with_underscore.mdx)
- [prop](http:/example.com/Variable.prop.mdx)
- [propb](http:/example.com/Variable.propb.mdx)

## Functions

- [multipleExampleTags](http:/example.com/Function.multipleExampleTags.mdx)
- [singleExampleTag](http:/example.com/Function.singleExampleTag.mdx)
"
`;

exports[`Comments should compile comments for module: (Output File Strategy "modules") (Option Group "1") 1`] = `
"# typedoc-stubs

Comments form module comments

## Links

Links using \`{@link}\` inline tags.

- [CommentInterface](README.md#commentinterface) - Links to CommentInterface
- [Links to CommentInterface.prop](README.md#commentinterface)
- [Links to CommentInterface.propb](README.md#commentinterface)
- [CommentEnum.MemberB](README.md#commentenum)
- [SameName:var](README.md#samename-1)
- [SameName:interface](README.md#samename)
- [SameName.prop](README.md#samename)
- [prop:var](README.md#prop)
- [_prop_with_underscore:var](README.md#_prop_with_underscore)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

## Tag A

Comments for a tag

## Tag B

Comments for tag written on same line

## Html And Jsx

A <tag></tag> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

<div style={{backgroundColor: "#fff", padding: 16}}>
 <img style={{display: "block"}} height="48" width="48"/>
</div>

Some random {{braces}}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

## Media

You can include media in doc comments:

![alt SomeAlt](media/logo.png)

And include other files:

This is a simple example on how to use include.

![My image alt text](media/logo.png)
 [[include:not-found.md]]

## Code Blocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Enumerations

### CommentEnum

#### Enumeration Members

| Enumeration Member | Value | Description |
| :------ | :------ | :------ |
| \`Member\` | \`0\` | <p>Comment for Member</p>Some <p>html </p> and <tag></tag>.<p>**Deprecated**</p><p>Deprecated member</p><p>**See**</p><p>[SameName](README.md#samename-1)</p> |
| \`MemberB\` | \`1\` | - |

## Interfaces

### CommentInterface

#### Extended by

- [\`CommentInterfaceExtended\`](README.md#commentinterfaceextended)

#### Properties

| Property | Type |
| :------ | :------ |
| \`prop\` | \`string\` |
| \`propb\` | \`string\` |

***

### CommentInterfaceExtended

#### Extends

- [\`CommentInterface\`](README.md#commentinterface)

#### Properties

| Property | Type | Inherited from |
| :------ | :------ | :------ |
| \`prop\` | \`string\` | [\`CommentInterface\`](README.md#commentinterface).\`prop\` |
| \`propb\` | \`string\` | [\`CommentInterface\`](README.md#commentinterface).\`propb\` |
| \`propc\` | \`string\` | - |

***

### SameName

#### Properties

| Property | Type |
| :------ | :------ |
| \`prop\` | \`string\` |
| \`propb\` | \`string\` |

## Variables

### SameName

> **SameName**: \`true\`

***

### \\_prop\\_with\\_underscore

> \`const\` **\\_prop\\_with\\_underscore**: \`true\` = \`true\`

***

### prop

> \`const\` **prop**: \`true\` = \`true\`

***

### propb

> \`const\` **propb**: \`true\` = \`true\`

## Functions

### multipleExampleTags()

> **multipleExampleTags**(): \`boolean\`

Function with multiple example tags

#### Returns

\`boolean\`

#### Examples

\`\`\`ts
// If there are no code blocks, TypeDoc assumes the whole tag
// should be a code block. This is not valid TSDoc, but is recognized
// by VSCode and enables better JSDoc support.

factorial(1)
\`\`\`

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`

***

### singleExampleTag()

> **singleExampleTag**(): \`boolean\`

Function with single example tag

#### Returns

\`boolean\`

#### Example

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`
"
`;

exports[`Comments should compile comments for module: (Output File Strategy "modules") (Option Group "2") 1`] = `
"# typedoc-stubs

Comments form module comments

## Links

Links using \`{@link}\` inline tags.

- [CommentInterface](http:/example.com/README.mdx#CommentInterface) - Links to CommentInterface
- [Links to CommentInterface.prop](http:/example.com/README.mdx#prop)
- [Links to CommentInterface.propb](http:/example.com/README.mdx#propb)
- [CommentEnum.MemberB](http:/example.com/README.mdx#MemberB)
- [SameName:var](http:/example.com/README.mdx#SameName-1)
- [SameName:interface](http:/example.com/README.mdx#SameName)
- [SameName.prop](http:/example.com/README.mdx#prop-2)
- [prop:var](http:/example.com/README.mdx#prop-3)
- [_prop_with_underscore:var](http:/example.com/README.mdx#_prop_with_underscore)

External links:

- [Google](https://www.google.com)
- [\`https://www.google.com\`](https://www.google.com)

## Tag A

Comments for a tag

## Tag B

Comments for tag written on same line

## Html And Jsx

A \\<tag\\>\\</tag\\> in comments

A \`<tag>\` in backticks

Another object \`{ x: 1 }\`.

\\<div style=\\{\\{backgroundColor: "#fff", padding: 16\\}\\}\\>
 \\<img style=\\{\\{display: "block"\\}\\} height="48" width="48"/\\>
\\</div\\>

Some random \\{\\{braces\\}\\}.

\`\`\`
A <tag> in a code block
Some <p> html </p> inside codeblock
\`\`\`

## Media

You can include media in doc comments:

![alt SomeAlt](media/logo.png)

And include other files:

This is a simple example on how to use include.

![My image alt text](media/logo.png)
 [[include:not-found.md]]

## Code Blocks

\`\`\`css
.class {color:red}
\`\`\`

\`\`\`html
<div>x</div> <tag>y</tag>
\`\`\`

\`single line <code> {block}\`

## Enumerations

<a id="CommentEnum" name="CommentEnum"></a>

### CommentEnum

#### Enumeration Members

| Enumeration Member | Value | Description |
| :------ | :------ | :------ |
| <a id="Member" name="Member"></a> \`Member\` | \`0\` | <p>Comment for Member</p>Some \\<p\\> html \\</p\\> and \\<tag\\>\\</tag\\>.<p>**Deprecated**</p><p>Deprecated member</p><p>**See**</p><p>[SameName](http:/example.com/README.mdx#SameName-1)</p> |
| <a id="MemberB" name="MemberB"></a> \`MemberB\` | \`1\` | - |

## Interfaces

<a id="CommentInterface" name="CommentInterface"></a>

### CommentInterface

#### Extended by

- [\`CommentInterfaceExtended\`](http:/example.com/README.mdx#CommentInterfaceExtended)

#### Properties

| Property | Type |
| :------ | :------ |
| <a id="prop" name="prop"></a> \`prop\` | \`string\` |
| <a id="propb" name="propb"></a> \`propb\` | \`string\` |

***

<a id="CommentInterfaceExtended" name="CommentInterfaceExtended"></a>

### CommentInterfaceExtended

#### Extends

- [\`CommentInterface\`](http:/example.com/README.mdx#CommentInterface)

#### Properties

| Property | Type | Inherited from |
| :------ | :------ | :------ |
| <a id="prop-1" name="prop-1"></a> \`prop\` | \`string\` | [\`CommentInterface\`](http:/example.com/README.mdx#CommentInterface).[\`prop\`](http:/example.com/README.mdx#prop) |
| <a id="propb-1" name="propb-1"></a> \`propb\` | \`string\` | [\`CommentInterface\`](http:/example.com/README.mdx#CommentInterface).[\`propb\`](http:/example.com/README.mdx#propb) |
| <a id="propc" name="propc"></a> \`propc\` | \`string\` | - |

***

<a id="SameName" name="SameName"></a>

### SameName

#### Properties

| Property | Type |
| :------ | :------ |
| <a id="prop-2" name="prop-2"></a> \`prop\` | \`string\` |
| <a id="propb-2" name="propb-2"></a> \`propb\` | \`string\` |

## Variables

<a id="SameName-1" name="SameName-1"></a>

### SameName

> **SameName**: \`true\`

***

<a id="_prop_with_underscore" name="_prop_with_underscore"></a>

### \\_prop\\_with\\_underscore

> \`const\` **\\_prop\\_with\\_underscore**: \`true\` = \`true\`

***

<a id="prop-3" name="prop-3"></a>

### prop

> \`const\` **prop**: \`true\` = \`true\`

***

<a id="propb-3" name="propb-3"></a>

### propb

> \`const\` **propb**: \`true\` = \`true\`

## Functions

<a id="multipleExampleTags" name="multipleExampleTags"></a>

### multipleExampleTags()

> **multipleExampleTags**(): \`boolean\`

Function with multiple example tags

#### Returns

\`boolean\`

#### Examples

\`\`\`ts
// If there are no code blocks, TypeDoc assumes the whole tag
// should be a code block. This is not valid TSDoc, but is recognized
// by VSCode and enables better JSDoc support.

factorial(1)
\`\`\`

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`

***

<a id="singleExampleTag" name="singleExampleTag"></a>

### singleExampleTag()

> **singleExampleTag**(): \`boolean\`

Function with single example tag

#### Returns

\`boolean\`

#### Example

If there is a code block, then both TypeDoc and VSCode will treat
text outside of the code block as regular text.

\`\`\`ts
factorial(1)
\`\`\`
"
`;
