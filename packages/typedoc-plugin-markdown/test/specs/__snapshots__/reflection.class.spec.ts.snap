// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Class Reflection should compile abstract class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: \`abstract\` AbstractClass

## Extended by

- [\`DerivedClassA\`](DerivedClassA.md)
- [\`DerivedClassB\`](DerivedClassB.md)

## Constructors

### new AbstractClass()

> **new AbstractClass**(): [\`AbstractClass\`](AbstractClass.md)

#### Returns

[\`AbstractClass\`](AbstractClass.md)

## Properties

### abstractProp

> **\`abstract\`** **abstractProp**: \`string\`

Comments for abstractProp

#### Source

classes.ts:9

## Methods

### abstractMethod()

> **\`abstract\`** **abstractMethod**(): \`string\`

Comments for abstractMethod

#### Returns

\`string\`

#### Source

classes.ts:14
"
`;

exports[`Class Reflection should compile abstract class: (Output File Strategy "members") (Option Group "2") 1`] = `
"# \`abstract\` AbstractClass

## Extended by

- [\`DerivedClassA\`](DerivedClassA.md)
- [\`DerivedClassB\`](DerivedClassB.md)

## Constructors

### new AbstractClass()

\`\`\`ts
new AbstractClass(): AbstractClass
\`\`\`

#### Returns

[\`AbstractClass\`](AbstractClass.md)

## Properties

| Modifier | Property | Type | Description |
| :------ | :------ | :------ | :------ |
| \`abstract\` | \`abstractProp\` | \`string\` | Comments for abstractProp |

## Methods

### abstractMethod()

\`\`\`ts
abstract abstractMethod(): string
\`\`\`

Comments for abstractMethod

#### Returns

\`string\`

#### Source

classes.ts:14
"
`;

exports[`Class Reflection should compile class with accessors: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithAccessors

Comments for ClassWithAccessors

## Constructors

### new ClassWithAccessors()

> **new ClassWithAccessors**(): [\`ClassWithAccessors\`](ClassWithAccessors.md)

#### Returns

[\`ClassWithAccessors\`](ClassWithAccessors.md)

## Properties

### privateProp

> **\`private\`** **privateProp**: \`string\`

#### Source

classes.ts:72

## Accessors

### accessor

> **\`get\`** **accessor**(): \`string\`

Comments for getter

> **\`set\`** **accessor**(\`value\`): \`void\`

Comments for setter

#### Parameters

• \`value\`: \`string\`

Param comments

#### Returns

\`string\`

#### Source

classes.ts:76

***

### noGetter

> **\`set\`** **noGetter**(\`x\`): \`void\`

#### Parameters

• \`x\`: \`string\`

#### Source

classes.ts:92

***

### noSetter

> **\`get\`** **noSetter**(): \`string\`

#### Returns

\`string\`

#### Source

classes.ts:88
"
`;

exports[`Class Reflection should compile class with accessors: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ClassWithAccessors

Comments for ClassWithAccessors

## Constructors

### new ClassWithAccessors()

\`\`\`ts
new ClassWithAccessors(): ClassWithAccessors
\`\`\`

#### Returns

[\`ClassWithAccessors\`](ClassWithAccessors.md)

## Properties

| Modifier | Property | Type |
| :------ | :------ | :------ |
| \`private\` | \`privateProp\` | \`string\` |

## Accessors

### accessor

\`\`\`ts
get accessor(): string
\`\`\`

Comments for getter

\`\`\`ts
set accessor(value): void
\`\`\`

Comments for setter

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`value\` | \`string\` | Param comments |

#### Returns

\`string\`

#### Source

classes.ts:76

***

### noGetter

\`\`\`ts
set noGetter(x): void
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

#### Source

classes.ts:92

***

### noSetter

\`\`\`ts
get noSetter(): string
\`\`\`

#### Returns

\`string\`

#### Source

classes.ts:88
"
`;

exports[`Class Reflection should compile class with constructor overloads: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithConstructorOverloads

Comments for ClassWithConstructorOverloads

## Constructors

### new ClassWithConstructorOverloads(x, y)

> **new ClassWithConstructorOverloads**(\`x\`, \`y\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

• \`x\`: \`number\`

Comments for x number

• \`y\`: \`string\`

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:50

### new ClassWithConstructorOverloads(x)

> **new ClassWithConstructorOverloads**(\`x\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

• \`x\`: \`string\`

Comments for x string

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:55

### new ClassWithConstructorOverloads(s)

> **new ClassWithConstructorOverloads**(\`s\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

• \`s\`: \`string\`

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:56
"
`;

exports[`Class Reflection should compile class with constructor overloads: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ClassWithConstructorOverloads

Comments for ClassWithConstructorOverloads

## Constructors

### new ClassWithConstructorOverloads(x, y)

\`\`\`ts
new ClassWithConstructorOverloads(x, y): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`x\` | \`number\` | Comments for x number |
| \`y\` | \`string\` |  |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:50

### new ClassWithConstructorOverloads(x)

\`\`\`ts
new ClassWithConstructorOverloads(x): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`x\` | \`string\` | Comments for x string |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:55

### new ClassWithConstructorOverloads(s)

\`\`\`ts
new ClassWithConstructorOverloads(s): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`s\` | \`string\` |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

classes.ts:56
"
`;

exports[`Class Reflection should compile class with modifiers: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: \`abstract\` ClassWithModifiers

Comments for ClassWithModifiers

## Constructors

### new ClassWithModifiers()

> **new ClassWithModifiers**(): [\`ClassWithModifiers\`](ClassWithModifiers.md)

#### Returns

[\`ClassWithModifiers\`](ClassWithModifiers.md)

## Properties

### privateProp

> **\`private\`** **privateProp**: \`string\`

Comments for privateProp

#### Source

classes.ts:111

***

### protectedProp

> **\`protected\`** **protectedProp**: \`string\`

Comments for protectedProp

#### Source

classes.ts:121

***

### publicPropWithDefault

> **publicPropWithDefault**: \`string\` = \`'propWithDefault'\`

Comments for propWithDefault

#### Source

classes.ts:126

***

### readonlyProp

> **\`readonly\`** **readonlyProp**: \`string\`

Comments for abstractProperty

#### Source

classes.ts:116

***

### staticProp

> **\`static\`** **staticProp**: \`string\`

Comments for staticProp

#### Source

classes.ts:106

## Methods

### privateMethod()

> **\`private\`** **privateMethod**(): \`void\`

Comment for privateMethod

#### Returns

\`void\`

#### Source

classes.ts:138

***

### publicMethod()

> **publicMethod**(): \`void\`

Comment for publicMethod

#### Returns

\`void\`

#### Source

classes.ts:131

***

### staticMethod()

> **\`static\`** **staticMethod**(): \`void\`

Comment for staticMethod

#### Returns

\`void\`

#### Source

classes.ts:143
"
`;

exports[`Class Reflection should compile class with modifiers: (Output File Strategy "members") (Option Group "2") 1`] = `
"# \`abstract\` ClassWithModifiers

Comments for ClassWithModifiers

## Constructors

### new ClassWithModifiers()

\`\`\`ts
new ClassWithModifiers(): ClassWithModifiers
\`\`\`

#### Returns

[\`ClassWithModifiers\`](ClassWithModifiers.md)

## Properties

| Modifier | Property | Type | Description |
| :------ | :------ | :------ | :------ |
| \`private\` | \`privateProp\` | \`string\` | Comments for privateProp |
| \`protected\` | \`protectedProp\` | \`string\` | Comments for protectedProp |
| \`public\` | \`publicPropWithDefault\` | \`string\` | Comments for propWithDefault |
| \`readonly\` | \`readonlyProp\` | \`string\` | Comments for abstractProperty |
| \`static\` | \`staticProp\` | \`string\` | Comments for staticProp |

## Methods

### privateMethod()

\`\`\`ts
private privateMethod(): void
\`\`\`

Comment for privateMethod

#### Returns

\`void\`

#### Source

classes.ts:138

***

### publicMethod()

\`\`\`ts
publicMethod(): void
\`\`\`

Comment for publicMethod

#### Returns

\`void\`

#### Source

classes.ts:131

***

### staticMethod()

\`\`\`ts
static staticMethod(): void
\`\`\`

Comment for staticMethod

#### Returns

\`void\`

#### Source

classes.ts:143
"
`;

exports[`Class Reflection should compile class with type parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithTypeParameters\\<A, B, C\\>

Comments for ClassWithTypeParameters

## Type parameters

• **A**

Comments for param A

• **B** extends \`string\`

Comments for param B

• **C** = \`boolean\`

## Constructors

### new ClassWithTypeParameters()

> **new ClassWithTypeParameters**\\<\`A\`, \`B\`, \`C\`\\>(): [\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>

#### Returns

[\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>
"
`;

exports[`Class Reflection should compile class with type parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"# ClassWithTypeParameters\\<A, B, C\\>

Comments for ClassWithTypeParameters

## Type parameters

| Type parameter | Value | Description |
| :------ | :------ | :------ |
| \`A\` | - | Comments for param A |
| \`B\` extends \`string\` | - | Comments for param B |
| \`C\` | \`boolean\` | - |

## Constructors

### new ClassWithTypeParameters()

\`\`\`ts
new ClassWithTypeParameters<A, B, C>(): ClassWithTypeParameters<A, B, C>
\`\`\`

#### Returns

[\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>
"
`;

exports[`Class Reflection should compile derived class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: DerivedClassA

Comments for DerivedClassA

## Extends

- [\`AbstractClass\`](AbstractClass.md)

## Constructors

### new DerivedClassA()

> **new DerivedClassA**(): [\`DerivedClassA\`](DerivedClassA.md)

#### Returns

[\`DerivedClassA\`](DerivedClassA.md)

#### Inherited from

[\`AbstractClass\`](AbstractClass.md).[\`constructor\`](AbstractClass.md#constructors)

## Properties

### abstractProp

> **abstractProp**: \`string\` = \`'abstractProp'\`

Comments for abstractProp

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractProp\`](AbstractClass.md#abstractprop)

#### Source

classes.ts:21

***

### derivedProp

> **derivedProp**: \`string\`

#### Source

classes.ts:22

## Methods

### abstractMethod()

> **abstractMethod**(): \`string\`

Comments for abstractMethod

#### Returns

\`string\`

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractMethod\`](AbstractClass.md#abstractmethod)

#### Source

classes.ts:23

***

### derivedMethod()

> **derivedMethod**(): \`string\`

#### Returns

\`string\`

#### Source

classes.ts:26
"
`;

exports[`Class Reflection should compile derived class: (Output File Strategy "members") (Option Group "2") 1`] = `
"# DerivedClassA

Comments for DerivedClassA

## Extends

- [\`AbstractClass\`](AbstractClass.md)

## Constructors

### new DerivedClassA()

\`\`\`ts
new DerivedClassA(): DerivedClassA
\`\`\`

#### Returns

[\`DerivedClassA\`](DerivedClassA.md)

#### Inherited from

[\`AbstractClass\`](AbstractClass.md).[\`constructor\`](AbstractClass.md#constructors)

## Properties

| Property | Type | Description | Overrides |
| :------ | :------ | :------ | :------ |
| \`abstractProp\` | \`string\` | Comments for abstractProp | [\`AbstractClass\`](AbstractClass.md).\`abstractProp\` |
| \`derivedProp\` | \`string\` | - | - |

## Methods

### abstractMethod()

\`\`\`ts
abstractMethod(): string
\`\`\`

Comments for abstractMethod

#### Returns

\`string\`

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractMethod\`](AbstractClass.md#abstractmethod)

#### Source

classes.ts:23

***

### derivedMethod()

\`\`\`ts
derivedMethod(): string
\`\`\`

#### Returns

\`string\`

#### Source

classes.ts:26
"
`;

exports[`Class Reflection should compile disposable class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: DisposableClass

## Implements

- \`Disposable\`

## Constructors

### new DisposableClass()

> **new DisposableClass**(): [\`DisposableClass\`](DisposableClass.md)

#### Returns

[\`DisposableClass\`](DisposableClass.md)

## Methods

### \`[dispose]\`()

> **[dispose]**(): \`void\`

#### Returns

\`void\`

#### Implementation of

\`Disposable.[dispose]\`

#### Source

classes.ts:147
"
`;
