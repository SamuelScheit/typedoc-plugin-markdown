// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Objects And Params should compile basic interface: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Interface: BasicInterface

Comments for BasicInterface

## Extended by

- [\`ExtendedInterface\`](ExtendedInterface.md)

## Properties

### ~~deprecatedProp~~

\`\`\`ts
deprecatedProp: string;
\`\`\`

#### Deprecated

This prop is deprecte

#### Some Tag

Comments for some tag

***

### functionProp

\`\`\`ts
functionProp: (s: string) => boolean;
\`\`\`

Comments for functionProper

#### Parameters

• **s**: \`string\`

Comment for param s

#### Returns

\`boolean\`

***

### optionalProp?

\`\`\`ts
optional optionalProp: string;
\`\`\`

Comments for optional prop

***

### prop

\`\`\`ts
prop: string;
\`\`\`

Comments for prop

***

### propReturningObjectDeclaration

\`\`\`ts
propReturningObjectDeclaration: {
  a: boolean;
  b: string;
};
\`\`\`

Comments for propReturningObjectDeclaration

#### propReturningObjectDeclaration.a

\`\`\`ts
a: boolean;
\`\`\`

#### propReturningObjectDeclaration.b

\`\`\`ts
b: string;
\`\`\`

***

### propReturningObjectDeclarations

\`\`\`ts
propReturningObjectDeclarations: {
  a: boolean;
  b: string;
  } & {
  c: boolean;
  d: string;
};
\`\`\`

Comments for propReturningObjectDeclarations

#### Type declaration

##### a

\`\`\`ts
a: boolean;
\`\`\`

##### b

\`\`\`ts
b: string;
\`\`\`

#### Type declaration

##### c

\`\`\`ts
c: boolean;
\`\`\`

##### d

\`\`\`ts
d: string;
\`\`\`

***

### propReturningSignatureDeclaration?

\`\`\`ts
optional propReturningSignatureDeclaration: () => string | number | boolean;
\`\`\`

Comments for propReturningSignatureDeclaration

#### Returns

\`string\` \\| \`number\` \\| \`boolean\`

***

### propReturningSignatureDeclarations

\`\`\`ts
propReturningSignatureDeclarations: () => any & (paramsA: true | any[], paramsB?: any) => any & (paramsC: any) => any;
\`\`\`

Comments for propReturningSignatureDeclarations

***

### propWithProps

\`\`\`ts
propWithProps: {
  callbacks: Partial<CallbacksOptions<DisposableClass, ClassWithModifiers>>;
  nestedPropA: string;
  nestedPropB: boolean;
  nestedPropC: {
     nestedPropCA: string;
  };
  nestedPropD: () => boolean;
};
\`\`\`

Comments for propWithProps

#### propWithProps.callbacks?

\`\`\`ts
optional callbacks: Partial<CallbacksOptions<DisposableClass, ClassWithModifiers>>;
\`\`\`

Comments for callbacks

#### propWithProps.nestedPropA

\`\`\`ts
nestedPropA: string;
\`\`\`

Comments for nestedPropA

#### propWithProps.nestedPropB

\`\`\`ts
nestedPropB: boolean;
\`\`\`

Comments for nestedPropB

#### propWithProps.nestedPropC

\`\`\`ts
nestedPropC: {
  nestedPropCA: string;
};
\`\`\`

Comments for nestedPropC

#### propWithProps.nestedPropC.nestedPropCA

\`\`\`ts
nestedPropCA: string;
\`\`\`

Comments for nestedPropCA

#### propWithProps.nestedPropD

\`\`\`ts
nestedPropD: () => boolean;
\`\`\`

Comments for nestedPropD

##### Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile basic interface: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Interface: BasicInterface

Comments for BasicInterface

## Extended by

- [\`ExtendedInterface\`](ExtendedInterface.md)

## Properties

| Property | Type | Description |
| :------ | :------ | :------ |
| ~~\`deprecatedProp\`~~ | \`string\` | **Deprecated**<br />This prop is deprecte<br /><br />**Some Tag**<br />Comments for some tag |
| \`functionProp\` | (\`s\`: \`string\`) => \`boolean\` | Comments for functionProper<br /><br />**Param**<br />Comment for param s |
| \`optionalProp?\` | \`string\` | Comments for optional prop |
| \`prop\` | \`string\` | Comments for prop |
| \`propReturningObjectDeclaration\` | \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; } | Comments for propReturningObjectDeclaration |
| \`propReturningObjectDeclaration.a\` | \`boolean\` | - |
| \`propReturningObjectDeclaration.b\` | \`string\` | - |
| \`propReturningObjectDeclarations\` | \\{ \`a\`: \`boolean\`; \`b\`: \`string\`; } & \\{ \`c\`: \`boolean\`; \`d\`: \`string\`; } | Comments for propReturningObjectDeclarations |
| \`propReturningSignatureDeclaration?\` | () => \`string\` \\| \`number\` \\| \`boolean\` | Comments for propReturningSignatureDeclaration |
| \`propReturningSignatureDeclarations\` | () => \`any\` & (\`paramsA\`: \`true\` \\| \`any\`[], \`paramsB\`?: \`any\`) => \`any\` & (\`paramsC\`: \`any\`) => \`any\` | Comments for propReturningSignatureDeclarations |
| \`propWithProps\` | \\{ \`callbacks\`: \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\>; \`nestedPropA\`: \`string\`; \`nestedPropB\`: \`boolean\`; \`nestedPropC\`: \\{ \`nestedPropCA\`: \`string\`; }; \`nestedPropD\`: () => \`boolean\`; } | Comments for propWithProps |
| \`propWithProps.callbacks?\` | \`Partial\`\\<[\`CallbacksOptions\`](../classes/CallbacksOptions.md)\\<[\`DisposableClass\`](../classes/DisposableClass.md), [\`ClassWithModifiers\`](../classes/ClassWithModifiers.md)\\>\\> | Comments for callbacks |
| \`propWithProps.nestedPropA\` | \`string\` | Comments for nestedPropA |
| \`propWithProps.nestedPropB\` | \`boolean\` | Comments for nestedPropB |
| \`propWithProps.nestedPropC\` | \\{ \`nestedPropCA\`: \`string\`; } | Comments for nestedPropC |
| \`propWithProps.nestedPropC.nestedPropCA\` | \`string\` | Comments for nestedPropCA |
| \`propWithProps.nestedPropD\` | () => \`boolean\` | Comments for nestedPropD |
"
`;

exports[`Objects And Params should compile function returning a promise: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAPromise()

\`\`\`ts
functionReturningAPromise(): Promise<{
  prop: string;
}>
\`\`\`

Comments for function

## Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\{
  \`prop\`: \`string\`;
  }\\>

Return comments

> ### prop
>
> \`\`\`ts
> prop: string;
> \`\`\`
>
"
`;

exports[`Objects And Params should compile function returning a promise: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAPromise()

\`\`\`ts
functionReturningAPromise(): Promise<{
  prop: string;
}>
\`\`\`

Comments for function

## Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\\{
  \`prop\`: \`string\`;
  }\\>

Return comments

> ### prop
>
> \`\`\`ts
> prop: string;
> \`\`\`
>
"
`;

exports[`Objects And Params should compile function returning a union: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAUnionType()

\`\`\`ts
functionReturningAUnionType(): string | boolean | "string1" | "string2"
\`\`\`

Comments for function

## Returns

\`string\` \\| \`boolean\` \\| \`"string1"\` \\| \`"string2"\`

Return comments
"
`;

exports[`Objects And Params should compile function returning a union: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAUnionType()

\`\`\`ts
functionReturningAUnionType(): string | boolean | "string1" | "string2"
\`\`\`

Comments for function

## Returns

\`string\` \\| \`boolean\` \\| \`"string1"\` \\| \`"string2"\`

Return comments
"
`;

exports[`Objects And Params should compile function returning an object: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionReturningAnObject()

\`\`\`ts
functionReturningAnObject(): {
  x: number;
  y: number;
}
\`\`\`

Comments for function

## Returns

\`\`\`ts
{
  x: number;
  y: number;
}
\`\`\`

Return comments

### x

\`\`\`ts
x: number = 1;
\`\`\`

### y

\`\`\`ts
y: number = 2;
\`\`\`

## Default

\`\`\`ts
{}
\`\`\`
"
`;

exports[`Objects And Params should compile function returning an object: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionReturningAnObject()

\`\`\`ts
functionReturningAnObject(): {
  x: number;
  y: number;
}
\`\`\`

Comments for function

## Returns

\`\`\`ts
{
  x: number;
  y: number;
}
\`\`\`

Return comments

### x

\`\`\`ts
x: number = 1;
\`\`\`

### y

\`\`\`ts
y: number = 2;
\`\`\`

## Default

\`\`\`ts
{}
\`\`\`
"
`;

exports[`Objects And Params should compile function with nested parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Function: functionWithNestedParameters()

\`\`\`ts
functionWithNestedParameters(
   params:     {
      name: string;
      nestedObj: {
         name: string;
         obj: {
            name: () => void;
         };
         value: number;
      };
      parent: number;
      }, 
   context: any, 
   somethingElse?: string): boolean
\`\`\`

Some nested params.

## Parameters

• **params**

The parameters passed to the method.

• **params\\.name**: \`string\`

The name of the new group.

• **params\\.nestedObj**

A nested object.

• **params\\.nestedObj\\.name?**: \`string\`

• **params\\.nestedObj\\.obj?**

• **params\\.nestedObj\\.obj\\.name?**

• **params\\.nestedObj\\.value?**: \`number\`

• **params\\.parent?**: \`number\`

• **context?**: \`any\`

The context of the method call.

• **somethingElse?**: \`string\`

## Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile function with nested parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Function: functionWithNestedParameters()

\`\`\`ts
functionWithNestedParameters(
   params:     {
      name: string;
      nestedObj: {
         name: string;
         obj: {
            name: () => void;
         };
         value: number;
      };
      parent: number;
      }, 
   context: any, 
   somethingElse?: string): boolean
\`\`\`

Some nested params.

## Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \`Object\` | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \`Object\` | A nested object. |
| \`params.nestedObj.name\`? | \`string\` | - |
| \`params.nestedObj.obj\`? | \`Object\` | - |
| \`params.nestedObj.obj.name\`? | () => \`void\` | - |
| \`params.nestedObj.value\`? | \`number\` | - |
| \`params.parent\`? | \`number\` | - |
| \`context\`? | \`any\` | The context of the method call. |
| \`somethingElse\`? | \`string\` | - |

## Returns

\`boolean\`
"
`;

exports[`Objects And Params should compile intersection type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: IntersectionType

\`\`\`ts
type IntersectionType: TupleType & ArrayType & {
  bar: number;
};
\`\`\`

Comments for IntersectionType

## Type declaration

### bar

\`\`\`ts
bar: number;
\`\`\`
"
`;

exports[`Objects And Params should compile intersection type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type alias: IntersectionType

\`\`\`ts
type IntersectionType: TupleType & ArrayType & {
  bar: number;
};
\`\`\`

Comments for IntersectionType

## Type declaration

### bar

\`\`\`ts
bar: number;
\`\`\`
"
`;

exports[`Objects And Params should compile literal type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: LiteralType

\`\`\`ts
type LiteralType: {
  x: string;
  y: {
     x: string;
     y: boolean | string;
     z: (x: string) => string;
  };
  z: (x: string) => string;
  get set accessorA: Promise<string>;
  get set accessorB: string;
  someFunction: Promise<any>;
};
\`\`\`

Comments for LiteralType

## Type declaration

### x

\`\`\`ts
x: string;
\`\`\`

comment for x

### y

\`\`\`ts
y: {
  x: string;
  y: boolean | string;
  z: (x: string) => string;
};
\`\`\`

comment for y

### y.x

\`\`\`ts
x: string;
\`\`\`

comment for y.x

### y.y

\`\`\`ts
y: boolean | string;
\`\`\`

comment for y.y

### y.z

\`\`\`ts
z: (x: string) => string;
\`\`\`

comment for y.z

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### z

\`\`\`ts
z: (x: string) => string;
\`\`\`

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### accessorA

\`\`\`ts
get accessorA(): Promise<string>
\`\`\`

Comments for accessorA getter

\`\`\`ts
set accessorA(x: Promise<string>): void
\`\`\`

Comments for accessorA setter

#### Parameters

• **x**: [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

### accessorB

\`\`\`ts
get accessorB(): string
\`\`\`

\`\`\`ts
set accessorB(x: string): void
\`\`\`

#### Parameters

• **x**: \`string\`

#### Returns

\`string\`

### someFunction()

Comments for someFunction

#### Parameters

• **param**: \`string\`

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Objects And Params should compile literal type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type alias: LiteralType

\`\`\`ts
type LiteralType: {
  x: string;
  y: {
     x: string;
     y: boolean | string;
     z: (x: string) => string;
  };
  z: (x: string) => string;
  get set accessorA: Promise<string>;
  get set accessorB: string;
  someFunction: Promise<any>;
};
\`\`\`

Comments for LiteralType

## Type declaration

### x

\`\`\`ts
x: string;
\`\`\`

comment for x

### y

\`\`\`ts
y: {
  x: string;
  y: boolean | string;
  z: (x: string) => string;
};
\`\`\`

comment for y

### y.x

\`\`\`ts
x: string;
\`\`\`

comment for y.x

### y.y

\`\`\`ts
y: boolean | string;
\`\`\`

comment for y.y

### y.z

\`\`\`ts
z: (x: string) => string;
\`\`\`

comment for y.z

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

#### Returns

\`string\`

### z

\`\`\`ts
z: (x: string) => string;
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

#### Returns

\`string\`

### accessorA

\`\`\`ts
get accessorA(): Promise<string>
\`\`\`

Comments for accessorA getter

\`\`\`ts
set accessorA(x: Promise<string>): void
\`\`\`

Comments for accessorA setter

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | [\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\> |

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`string\`\\>

### accessorB

\`\`\`ts
get accessorB(): string
\`\`\`

\`\`\`ts
set accessorB(x: string): void
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

#### Returns

\`string\`

### someFunction()

Comments for someFunction

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`param\` | \`string\` |  |

#### Returns

[\`Promise\`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<\`any\`\\>
"
`;

exports[`Objects And Params should compile object with symbol: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Variable: objectWithSymbol

\`\`\`ts
const objectWithSymbol: {
  [sym]: string;
};
\`\`\`

Comments variable with symbol

## Type declaration

### [sym]

\`\`\`ts
[sym]: string = 'value';
\`\`\`

Comments for symbol
"
`;

exports[`Objects And Params should compile object with symbol: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Variable: objectWithSymbol

\`\`\`ts
const objectWithSymbol: {
  [sym]: string;
};
\`\`\`

Comments variable with symbol

## Type declaration

### [sym]

\`\`\`ts
[sym]: string = 'value';
\`\`\`

Comments for symbol
"
`;

exports[`Objects And Params should compile union type: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Type alias: UnionType

\`\`\`ts
type UnionType: string | boolean | {
  z: string;
};
\`\`\`

Comments for UnionType
"
`;

exports[`Objects And Params should compile union type: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Type alias: UnionType

\`\`\`ts
type UnionType: string | boolean | {
  z: string;
};
\`\`\`

Comments for UnionType
"
`;

exports[`Objects And Params should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Variable: objectLiteralVariable

\`\`\`ts
const objectLiteralVariable: {
  *: string;
  **foo**: string;
  *foo*: string;
  <: string;
  <foo: string;
  <foo>: string;
  >: string;
  _: string;
  _foo_: string;
  prop_with_underscore: string;
  prop|with|pipes: string;
  valueA: number;
  valueB: boolean;
  valueX: {
     valueA: number[];
     valueY: (z: string) => {
        a: string;
        b: string;
        c: {
           a: number;
           b: number;
        };
     };
     valueZ: string;
  };
  valueY: (unionParam: "a" | "b", _undercoreParam_: string) => string;
  |: string;
  ~: string;
};
\`\`\`

Comments for objectLiteralVariable

## Type declaration

### \\*

\`\`\`ts
*: string;
\`\`\`

### \\*\\*foo\\*\\*

\`\`\`ts
**foo**: string;
\`\`\`

### \\*foo\\*

\`\`\`ts
*foo*: string;
\`\`\`

### \\<

\`\`\`ts
<: string;
\`\`\`

### \\<foo

\`\`\`ts
<foo: string;
\`\`\`

### \\<foo\\>

\`\`\`ts
<foo>: string;
\`\`\`

### \\>

\`\`\`ts
>: string;
\`\`\`

### \\_

\`\`\`ts
_: string;
\`\`\`

### \\_foo\\_

\`\`\`ts
_foo_: string;
\`\`\`

### prop\\_with\\_underscore

\`\`\`ts
prop_with_underscore: string;
\`\`\`

### prop\\|with\\|pipes

\`\`\`ts
prop|with|pipes: string;
\`\`\`

### valueA

\`\`\`ts
valueA: number = 100;
\`\`\`

### valueB

\`\`\`ts
valueB: boolean = true;
\`\`\`

### valueX

\`\`\`ts
valueX: {
  valueA: number[];
  valueY: (z: string) => {
     a: string;
     b: string;
     c: {
        a: number;
        b: number;
     };
  };
  valueZ: string;
};
\`\`\`

### valueX.valueA

\`\`\`ts
valueA: number[];
\`\`\`

### valueX.valueY

\`\`\`ts
valueY: (z: string) => {
  a: string;
  b: string;
  c: {
     a: number;
     b: number;
  };
};
\`\`\`

#### Parameters

• **z**: \`string\`

#### Returns

\`\`\`ts
{
  a: string;
  b: string;
  c: {
     a: number;
     b: number;
  };
}
\`\`\`

##### a

\`\`\`ts
a: string = 'test';
\`\`\`

##### b

\`\`\`ts
b: string = z;
\`\`\`

##### c

\`\`\`ts
c: {
  a: number;
  b: number;
};
\`\`\`

##### c.a

\`\`\`ts
a: number = 1;
\`\`\`

##### c.b

\`\`\`ts
b: number = 2;
\`\`\`

### valueX.valueZ

\`\`\`ts
valueZ: string = 'foo';
\`\`\`

### valueY

\`\`\`ts
valueY: (unionParam: "a" | "b", _undercoreParam_: string) => string;
\`\`\`

#### Parameters

• **unionParam**: \`"a"\` \\| \`"b"\`

• **\\_undercoreParam\\_**: \`string\`

#### Returns

\`string\`

### \\|

\`\`\`ts
|: string;
\`\`\`

### ~

\`\`\`ts
~: string;
\`\`\`
"
`;

exports[`Objects And Params should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Variable: objectLiteralVariable

\`\`\`ts
const objectLiteralVariable: {
  *: string;
  **foo**: string;
  *foo*: string;
  <: string;
  <foo: string;
  <foo>: string;
  >: string;
  _: string;
  _foo_: string;
  prop_with_underscore: string;
  prop|with|pipes: string;
  valueA: number;
  valueB: boolean;
  valueX: {
     valueA: number[];
     valueY: (z: string) => {
        a: string;
        b: string;
        c: {
           a: number;
           b: number;
        };
     };
     valueZ: string;
  };
  valueY: (unionParam: "a" | "b", _undercoreParam_: string) => string;
  |: string;
  ~: string;
};
\`\`\`

Comments for objectLiteralVariable

## Type declaration

### \\*

\`\`\`ts
*: string;
\`\`\`

### \\*\\*foo\\*\\*

\`\`\`ts
**foo**: string;
\`\`\`

### \\*foo\\*

\`\`\`ts
*foo*: string;
\`\`\`

### \\<

\`\`\`ts
<: string;
\`\`\`

### \\<foo

\`\`\`ts
<foo: string;
\`\`\`

### \\<foo\\>

\`\`\`ts
<foo>: string;
\`\`\`

### \\>

\`\`\`ts
>: string;
\`\`\`

### \\_

\`\`\`ts
_: string;
\`\`\`

### \\_foo\\_

\`\`\`ts
_foo_: string;
\`\`\`

### prop\\_with\\_underscore

\`\`\`ts
prop_with_underscore: string;
\`\`\`

### prop\\|with\\|pipes

\`\`\`ts
prop|with|pipes: string;
\`\`\`

### valueA

\`\`\`ts
valueA: number = 100;
\`\`\`

### valueB

\`\`\`ts
valueB: boolean = true;
\`\`\`

### valueX

\`\`\`ts
valueX: {
  valueA: number[];
  valueY: (z: string) => {
     a: string;
     b: string;
     c: {
        a: number;
        b: number;
     };
  };
  valueZ: string;
};
\`\`\`

### valueX.valueA

\`\`\`ts
valueA: number[];
\`\`\`

### valueX.valueY

\`\`\`ts
valueY: (z: string) => {
  a: string;
  b: string;
  c: {
     a: number;
     b: number;
  };
};
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`z\` | \`string\` |

#### Returns

\`\`\`ts
{
  a: string;
  b: string;
  c: {
     a: number;
     b: number;
  };
}
\`\`\`

##### a

\`\`\`ts
a: string = 'test';
\`\`\`

##### b

\`\`\`ts
b: string = z;
\`\`\`

##### c

\`\`\`ts
c: {
  a: number;
  b: number;
};
\`\`\`

##### c.a

\`\`\`ts
a: number = 1;
\`\`\`

##### c.b

\`\`\`ts
b: number = 2;
\`\`\`

### valueX.valueZ

\`\`\`ts
valueZ: string = 'foo';
\`\`\`

### valueY

\`\`\`ts
valueY: (unionParam: "a" | "b", _undercoreParam_: string) => string;
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`unionParam\` | \`"a"\` \\| \`"b"\` |
| \`_undercoreParam_\` | \`string\` |

#### Returns

\`string\`

### \\|

\`\`\`ts
|: string;
\`\`\`

### ~

\`\`\`ts
~: string;
\`\`\`
"
`;
